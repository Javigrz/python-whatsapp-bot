#!/usr/bin/env python3
"""
Script para diagnosticar la conexi√≥n a la base de datos de Railway
"""
import os
import psycopg2
from urllib.parse import urlparse

def test_connection():
    """Probar diferentes configuraciones de conexi√≥n"""
    database_url = os.getenv('DATABASE_URL')
    
    if not database_url:
        print("‚ùå No hay DATABASE_URL configurada")
        return
    
    print(f"üîó Testing connection to: {database_url[:50]}...")
    
    # Parsear la URL
    parsed = urlparse(database_url)
    
    connection_configs = [
        # Configuraci√≥n 1: URL directa
        {"url": database_url, "description": "URL directa"},
        
        # Configuraci√≥n 2: Sin SSL
        {"url": database_url + ("&" if "?" in database_url else "?") + "sslmode=disable", 
         "description": "Sin SSL"},
         
        # Configuraci√≥n 3: SSL preferido
        {"url": database_url + ("&" if "?" in database_url else "?") + "sslmode=prefer", 
         "description": "SSL preferido"},
         
        # Configuraci√≥n 4: Par√°metros individuales
        {
            "params": {
                "host": parsed.hostname,
                "port": parsed.port,
                "database": parsed.path[1:],  # quitar el '/' inicial
                "user": parsed.username,
                "password": parsed.password,
                "sslmode": "disable"
            },
            "description": "Par√°metros individuales"
        }
    ]
    
    for config in connection_configs:
        try:
            print(f"\nüß™ Probando: {config['description']}")
            
            if 'url' in config:
                conn = psycopg2.connect(config['url'])
            else:
                conn = psycopg2.connect(**config['params'])
                
            cursor = conn.cursor()
            cursor.execute("SELECT version();")
            version = cursor.fetchone()
            print(f"‚úÖ Conexi√≥n exitosa! PostgreSQL version: {version[0][:50]}...")
            
            cursor.close()
            conn.close()
            return True
            
        except Exception as e:
            print(f"‚ùå Error: {str(e)[:100]}...")
    
    return False

if __name__ == "__main__":
    print("üöÄ Iniciando test de conexi√≥n a base de datos")
    success = test_connection()
    
    if not success:
        print("\n‚ùå Todas las configuraciones fallaron")
    else:
        print("\n‚úÖ Al menos una configuraci√≥n funcion√≥")
